# from Brain.AiBrain import replyBrain
# from Brain.QnA import questionAnswer 
# from Body.listen import micExecution
# print(">> Starting your P.A.I ! just few seconds.")
# from Body.speak import speak
# from Features.clap import Tester
# from Main import main_task_execution
# import subprocess
# import time
# print(">> Clap to start...")


# def mainExecution():

#     speak("Hello, Namaste!")
#     speak("I am your Personal Artificial Intelligence, how may i help you")

#     while True:
#         data=micExecution()
#         data=str(data).replace(".","")
#         data=data.lower()
        
#         value_Return= main_task_execution(data)
#         if value_Return==True:
#             pass

#         elif len(data)<3: 
#             pass

#         elif "what is your name" in data:
#             print("My name is PAI")
#             speak("My name is PAI")

#         elif("what is full form of pai" or "what is full form of pie" or "what is your full form" or "your full form") in data:
#             print("My full form is: Personal Artificial Intelligence or you can also say, Priyansh's Artificial Intelligence")
#             speak("My full form is: Personal Artificial Intelligence or you can also say, Priyansh's Artificial Intelligence")

#         elif ("who created you" or "who developed you" or "who made you") in data:
#             print("I was developed by Priyansh.")
#             speak("I was developed by Priyansh.")

#         elif "turn on the tv" in data:# Specific Command
#             speak("Ok..Turning On The Android TV")

#         elif "what is" in data or "where is" in data or "question" or "answer" in data:
#             reply=questionAnswer(data)
#             speak(reply)
#         else:
#             reply=replyBrain(data)
#             speak(reply)
        
# def clapDetect():

#     query=Tester()
#     if "True-Mic" in query:
#         print("")
#         print(">> Clap Detected!! <<")
#         print("")
#         speak("Clap detected!")
#         subprocess.Popen(['python', 'Gui.py'])
#         mainExecution()
    
#     else:
#         pass

# clapDetect()
# time.sleep(1)

other..


# working...

# import subprocess
# from time import sleep
# #opening FxSound 

# FxSound = r"C:\Program Files\FxSound LLC\FxSound\FxSound.exe"

# # Run the FxSound file using subprocess
# subprocess.Popen(FxSound)

# sleep(2)

# # Specify the path to the VBS file
# vbs_file = r"C:\Users\priya\Desktop\Project-AI(PAI)\welcome greet.vbs"

# # Run the VBS file using subprocess
# subprocess.call(['cscript.exe', '//nologo', vbs_file])


# from Body.speak import speak
# from Brain.AiBrain import replyBrain
# from Brain.QnA import questionAnswer 
# from Body.listen import micExecution

# print(">> Starting your P.A.I ! just few seconds.")
# speak(">> Starting your P.A.I ! just few seconds.")

# from Features.clap import Tester
# from Main import main_task_execution
# from PyQt5.QtWidgets import QApplication
# import sys
# app = QApplication(sys.argv)
# import threading
# from Gui import GUI

# print(">> Clap to start...")

# def start_main_execution(gui):
#     thread = threading.Thread(target=mainExecution, args=(gui,))
#     thread.daemon = True
#     thread.start()

# def mainExecution(gui):
#     # Greet the user
#     speak("Hello, Namaste!")
#     speak("I am your Personal Artificial Intelligence, how may I help you?")

#     # Keep running while the GUI is visible
#     while gui.isVisible():
#         # Get user input from the microphone
#         try:
#             data = micExecution()
#         except:
#             continue
#         data = str(data).replace(".", "")
#         data = data.lower()

#         # Process the input based on the user's intentions
#         value_Return = main_task_execution(data)
#         if value_Return:
#             # Do nothing
#             pass
#         elif len(data) < 3:
#             # Ignore inputs that are too short
#             pass
#         else:
#             # Handle common questions and commands
#             commands = [
#                 "what is your name",
#                 "what is full form of pai",
#                 "what is full form of pie",
#                 "what is your full form",
#                 "your full form",
#                 "who created you",
#                 "who developed you",
#                 "who made you",
#                 "turn on the tv",
#                 "what is",
#                 "where is",
#                 "question",
#                 "answer"
#             ]
#             if any(command in data for command in commands):
#                 if "what is your name" in data:
#                     print("My name is PAI")
#                     speak("My name is PAI")

#                 elif any(command in data for command in ["what is full form of pai", "what is full form of pie", "what is your full form", "your full form"]):
#                     print("My full form is: Personal Artificial Intelligence or you can also say, Priyansh's Artificial Intelligence")
#                     speak("My full form is: Personal Artificial Intelligence or you can also say, Priyansh's Artificial Intelligence")

#                 elif any(command in data for command in ["who created you", "who developed you", "who made you"]):
#                     print("I was developed by Priyansh.")
#                     speak("I was developed by Priyansh.")

#                 elif "turn on the tv" in data:
#                     speak("Ok..Turning On The Android TV")

#                 elif any(command in data for command in ["what is", "where is", "question", "answer"]):
#                     reply = questionAnswer(data)
#                     speak(reply)

#             # Handle other user inputs using AI
#             else:
#                 reply = replyBrain(data)
#                 speak(reply)

# def clapDetect():
#     # Test the microphone and store the result in 'query'
#     query = Tester()
    
#     # If the microphone is working, continue
#     if "True-Mic" in query:
#         # Print message to indicate clap detection
#         print(">> Clap Detected!!")
#         # Speak to indicate clap detection
#         speak("Clap detected!")
        
#         # Create an instance of the GUI
#         gui = GUI()
#         # Show the GUI
#         gui.show()
        
#         # Start the main execution loop in a new thread
#         threading.Thread(target=mainExecution, args=(gui,)).start()
        
#         # Start the event loop for the GUI
#         app.exec_()
        
#     # If the microphone is not working, do nothing
#     else:
#         print("Microphone not detected!")

# clapDetect()

# import subprocess
# from time import sleep
# from PyQt5.QtWidgets import QApplication
# import threading
# from Gui import GUI
# from Body.speak import speak
# from Body.listen import micExecution
# from Brain.AiBrain import replyBrain
# from Brain.QnA import questionAnswer
# from Features.clap import Tester
# from Main import main_task_execution


# # Function to start the main execution loop
# def mainExecution(gui):
#     # Greet the user
#     speak("Hello, Namaste!")
#     speak("I am your Personal Artificial Intelligence, how may I help you?")

#     # Keep running while the GUI is visible
#     while gui.isVisible():
#         # Get user input from the microphone
#         try:
#             data = micExecution()
#             data = str(data).replace(".", "")
#             data = data.lower()
#         except Exception as e:
#             print("Error getting microphone input: ", e)
#             speak("Sorry, I could not understand you. Please try again.")
#             continue

#         # Process the input based on the user's intentions
#         value_Return = main_task_execution(data)
#         if value_Return:
#             # Do nothing
#             pass
#         elif len(data) < 3:
#             # Ignore inputs that are too short
#             pass
#         else:
#             # Handle common questions and commands
#             commands = [
#                 "what is your name",
#                 "what is full form of pai",
#                 "what is full form of pie",
#                 "what is your full form",
#                 "your full form",
#                 "who created you",
#                 "who developed you",
#                 "who made you",
#                 "turn on the tv",
#                 "what is",
#                 "where is",
#                 "question",
#                 "answer"
#             ]
#             if any(command in data for command in commands):
#                 if "what is your name" in data:
#                     print("My name is PAI")
#                     speak("My name is PAI")

#                 elif any(command in data for command in ["what is full form of pai", "what is full form of pie", "what is your full form", "your full form"]):
#                     print("My full form is: Personal Artificial Intelligence or you can also say, Priyansh's Artificial Intelligence")
#                     speak("My full form is: Personal Artificial Intelligence or you can also say, Priyansh's Artificial Intelligence")

#                 elif any(command in data for command in ["who created you", "who developed you", "who made you"]):
#                     print("I was developed by Priyansh.")
#                     speak("I was developed by Priyansh.")

#                 elif "turn on the tv" in data:
#                     speak("Ok..Turning On The Android TV")

#                 elif any(command in data for command in ["what is", "where is", "question", "answer"]):
#                     reply = questionAnswer(data)
#                     speak(reply)

#             # Handle other user inputs using AI
#             else:
#                 reply = replyBrain(data)
#                 speak(reply)

# import sys
# from PyQt5.QtWidgets import QApplication
# app = QApplication(sys.argv)

# # Function to detect claps and start the main execution loop
# def clapDetect():
#     # Test the microphone and store the result in 'query'
#     try:
#         query = Tester()
#     except Exception as e:
#         print(f"Error while testing the microphone: {str(e)}")
#         speak("Sorry, there was an error while testing the microphone. Please make sure it is connected and try again.")
#         return
    
#     # If the microphone is working, continue
#     if "True-Mic" in query:
#         # Print message to indicate clap detection
#         print(">> Clap Detected!!")
#         # Speak to indicate clap detection
#         speak("Clap detected!")
        
#         # Create an instance of the GUI
#         gui = GUI()
#         # Show the GUI
#         gui.show()
        
#         # Start the main execution loop in a new thread
#         threading.Thread(target=mainExecution, args=(gui,)).start()
        
#         # Start the event loop for the GUI
#         app.exec_()
        
#     # If the microphone is not working, do nothing
#     else:
#         print("Microphone not detected!")
#         speak("Sorry, I was unable to detect a microphone. Please make sure it is connected and try again.")

# clapDetect()